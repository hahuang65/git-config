[include]
  path = ~/.gitconfig.secret
[init]
	defaultBranch = main
[core]
  excludesfile = ~/.gitignore_global
  editor = nvim
  pager = delta
[color]
  ui = auto
[commit]
  template = ~/.gitmessage
  verbose = true
[delta "colorscheme"]
  commit-style                  = bold yellow 
  file-style                    = brightyellow
  hunk-header-style             = bold blue
  minus-style                   = bold red
  minus-non-emph-style          = red
  minus-emph-style              = bold black red
  minus-empty-line-marker-style = normal red
  zero-style                    = normal
  plus-style                    = bold green
  plus-non-emph-style           = green
  plus-emph-style               = bold black green
  plus-empty-line-marker-style  = normal green
  whitespace-error-style        = reverse purple
  true-color                    = always
  line-numbers-zero-style       = dim normal
  line-numbers-minus-style      = red
  line-numbers-plus-style       = green
  line-numbers-left-style       = blue
  line-numbers-right-style      = blue
[delta]
  features = colorscheme
  navigate = true
  side-by-side = true
[diff]
  submodule = log
  colorMoved = default
[fetch]
  prune = true
[filter "lfs"]
  clean = git-lfs clean %f
  smudge = git-lfs smudge %f
  required = true
[interactive]
  diffFilter = delta --color-only
[pager]
  diff = delta
  reflog = delta
  show = delta
[pull]
  rebase = true
[push]
  default = simple
[rebase]
  autosquash = true
[alias]
  aliases = "!f() { LINE=$(grep --line-number alias ~/.gitconfig | head --lines=1 |cut --fields=1 --delimiter=:); tail --lines=+"$LINE" ~/.gitconfig; }; f"
  amend = commit --amend
  branches = branch --list
  branch-name = rev-parse --abbrev-ref HEAD
  branch-name-or-commit = "!f() { git symbolic-ref --short -q HEAD || git rev-parse --short HEAD; }; f"
  change = "!f() { git switch hh/"${1}" 2> /dev/null || git switch "${1}"; }; f"
  cleanup = "!f() { CURRENT_BRANCH=$(git branch-name); git switch $(git trunk-branch) > /dev/null 2>&1 && git branch -vv | awk '/: gone]/{print $1}' | xargs --no-run-if-empty --max-args=1 git branch --delete --force; git switch "$CURRENT_BRANCH" > /dev/null 2>&1; }; f"
  conflicts = diff --name-only --diff-filter=U
  issue = !gh issue
  license = "!f() { ~/.dotfiles/git/scripts/git-license $@; }; f"
  new = "!f() { git switch --no-track --create hh/"${1}" $(git trunk-branch); }; f"
  patch = !git --no-pager diff --no-color
  pr = !gh pr
  prep = !git add --intent-to-add . && git add --patch && git diff --cached --stat
  prompt = "!f() { git rev-parse && echo \"[Ôêò $(git branch-name-or-commit)] \"; }; f"
  publish = !git push --set-upstream origin $(git branch-name)
  retrunk = !git fetch origin $(git trunk-branch) && git rebase --autostash origin/$(git trunk-branch)
  rename = "!f() { git unpublish && git branch --move hh/${1} && git publish; }; f"
  repo = !gh repo
  review = "!f() { git log --no-merges --author=h.huang65@gmail.com --author=hao@hwrd.me --since="${1}"; }; f"
  shove = push --force-with-lease
  state = status --short --branch --untracked-files
  summit-rc = "!f() { git switch production; git sync; git switch --create "${1}-rc"; git merge --no-edit --no-ff origin/$(git trunk-branch); git publish; TITLE=$(echo "${1}" | sed -e 's/-/ /g' | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1'); git pr create --web --base=production --title="\"${TITLE} RC\""; }; f"
  sync = "!f() { git fetch --all --prune && git pull --rebase --autostash && git submodule update --init --recursive && git cleanup; }; f"
  trunk = "!f() { git switch $(git trunk-branch); }; f"
  trunk-branch = "!f() { git branch --remote | grep 'origin/HEAD' | awk -F' -> ' '{print $2}' | sed 's/origin\\///'; }; f"
  unpublish = !git push origin :$(git branch-name)
  untag = "!f() { git tag --delete "${1}" && git push origin :refs/tags/"${1}"; }; f"
  unwip = "!f() { git log --format=%s -n 1 | grep WIP > /dev/null && git reset HEAD^; echo "Now on `git log -n 1 --format='%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'`"; }; f"
  which = "!f() { git aliases | grep "${1}"; }; f"
  wip = !git add --all && git commit --message "WIP"
